InstructionSetOpCode={
    "mov":"000000",
    "add":"000001",
    "sub":"000010",
    "inc":"000011",
    "dec":"000100",
    "mul":"000101",
    "div":"000110",
    "and":"000111",
    "or":"001000",
    "not":"001001"
    }
RegistersCode={
    "ax":"000",
    "al":"000",
    "ah":"100",
    "bx":"011",
    "bl":"011",
    "bh":"111",
    "cx":"001",
    "ch":"101",
    "cl":"001",
    "dx":"010",
    "dh":"110",
    "dl":"010",
    "sp":"100",
    "bp":"101",
    "si":"110",
    "di":"111"
    
    }
RegistersValue={
    "ax":[0,0,0,0],
    "bx":[0,0,0,0],
    "cx":[0,0,0,0],
    "dx":[0,0,0,0],
    "sp":[0,0,0,0],
    "bp":[0,0,0,0],
    "si":[0,0,0,0],
    "di":[0,0,0,0]
    }
MemoryValue={
    "[0h]":"00h",
    "[1h]":"00h",
    "[2h]":"00h",
    "[3h]":"00h",
    "[4h]":"00h",
    "[5h]":"00h",
    "[6h]":"00h",
    "[7h]":"00h",
    "[8h]":"00h",
    "[9h]":"00h",
    "[ah]":"00h",
    "[bh]":"00h",
    "[ch]":"00h",
    "[dh]":"00h",
    "[eh]":"00h",
    "[fh]":"00h"
    }
MemoryCode={
    "[0h]":"0000 0000 0000 0000 0000",
    "[1h]":"0000 0000 0000 0000 0001",
    "[2h]":"0000 0000 0000 0000 0010",
    "[3h]":"0000 0000 0000 0000 0011",
    "[4h]":"0000 0000 0000 0000 0100",
    "[5h]":"0000 0000 0000 0000 0101",
    "[6h]":"0000 0000 0000 0000 0110",
    "[7h]":"0000 0000 0000 0000 0111",
    "[8h]":"0000 0000 0000 0000 1000",
    "[9h]":"0000 0000 0000 0000 1001",
    "[ah]":"0000 0000 0000 0000 1010",
    "[bh]":"0000 0000 0000 0000 1011",
    "[ch]":"0000 0000 0000 0000 1100",
    "[dh]":"0000 0000 0000 0000 1101",
    "[eh]":"0000 0000 0000 0000 1110",
    "[fh]":"0000 0000 0000 0000 1111"
    }
Example="MOV [AX+1h],[Ah]"
def OpCodeGenerator(Instruction):
    global InstructionSplit
    InstructionSplit=Instruction.lower().split(" ",1)
    global OpCode
    OpCode=InstructionSplit[0]
    
    #print(InstructionSetOpCode[OpCode])
    
def OperandGenerator(InstructionSplit):
   # print(InstructionSplit)
    OperandSplit=(InstructionSplit[1]).split(",",1)
    #print(OperandSplit)
    global Operand1
    global Operand2
    if (len(OperandSplit)==1):
        
        Operand1=OperandSplit[1]
     #   print(Operand1)
    elif (len(OperandSplit)==2):
        Operand1=OperandSplit[0]
        Operand2=OperandSplit[1]
        
        print(Operand1)
        print(Operand2)
def ModGenerator():
    global MOD
    #Immediate
    if (Operand2[0] != '[' and Operand2 not in RegistersCode):
         MOD=00
         return
    #Register Direct
    if (Operand1 in RegistersCode and Operand2 in RegistersCode):
        MOD="11"
    #Direct and RegisterIndirect
    elif (((Operand1 in MemoryCode or Operand1.split("[",1)[1].split(']',1)[0] in RegistersCode)
          and Operand2 in RegistersCode) or
          ((Operand2 in MemoryCode or Operand2.split("[",1)[1].split(']',1)[0] in RegistersCode) and Operand1 in RegistersCode)):
        MOD="00"
    #RegisterRelative 
    elif('['+Operand1.split("[",1)[1].split(']',1)[0].split("+",1)[1]+']' in MemoryCode and '['+Operand2.split("[",1)[1].split(']',1)[0].split("+",1)[1]+']' in MemoryCode):
        MOD="01"
    elif ('['+Operand1.split("[",1)[1].split(']',1)[0].split("+",1)[1]+']' in MemoryCode and Operand2 in RegistersCode):
        MOD="01"
    elif(Operand2.split("[",1)[1].split(']',1)[0].split("+",1)[1] in MemoryCode and Operand1 in RegistersCode):
        MOD="01"
    else:
        MOD="-11"
        

def WGenerator():
    global W
    if(Operand2 in ["al","ah","bl","bh","cl","ch","dl","dh"]):
        W="1"
    elif(Operand2 in ["al","ah","bl","bh","cl","ch","dl","dh"]):
        W="0"s
    elif(len(Operand2)==2 ):
        W="1"
    elif(len(Operand2)==4):
        W="1"
    else:
        W="-1"

        
        
OpCodeGenerator(Example)
OperandGenerator(InstructionSplit)
print(Operand1.split("[",1)[1].split(']',1)[0].split("+",1)[1])


ModGenerator()

print(MOD)

print(Operand1.split("[",1)[1].split(']',1)[0].split("+",1)[1])
