# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'finalfe.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
from PyQt5 import QtCore, QtGui, QtWidgets

Invalid=False
#Make Invalid Function which checks if Invalid already then reutrn Invalid TRUE IF NOT THEN PERFORM EXTRA CHECKS AND RETURN TRUE OR FALSE
def get_instruction(val):
        for key, value in InstructionSetOpCode.items():
            if val == value:
                return key
InstructionSetOpCode={
    "mov":"000000",
    "add":"000001",
    "sub":"000010",
    "inc":"000011",
    "dec":"000100",
    "mul":"000101",
    "div":"000110",
    "and":"000111",
    "or":"001000",
    "not":"001001",
    "xor":"001010"
    #ror store in Deue and Use built in Rotate
    #rol
    
    }
RegistersCode={
    "ax":"000",
    "al":"000",
    "ah":"100",
    "bx":"011",
    "bl":"011",
    "bh":"111",
    "cx":"001",
    "ch":"101",
    "cl":"001",
    "dx":"010",
    "dh":"110",
    "dl":"010",
    "sp":"100",
    "bp":"101",
    "si":"110",
    "di":"111"
    
    }

RegistersValue={
    "ax":["0","0","0","0"],
    "bx":["0","0","0","0"],
    "cx":["0","0","0","0"],
    "dx":["0","0","0","0"],
    "sp":["0","0","0","0"],
    "bp":["0","0","0","0"],
    "si":["0","0","0","0"],
    "di":["0","0","0","0"]
    }
MemoryValue={#Note: MOV FUNCTION CHANGES THESE VALUES BUT DOESNOT CHANGE IT IN CODE AS SHOWN BELOW
    "[0h]":"00h",
    "[1h]":"00h",
    "[2h]":"00h",
    "[3h]":"00h",
    "[4h]":"00h",
    "[5h]":"00h",
    "[6h]":"00h",
    "[7h]":"00h",
    "[8h]":"00h",
    "[9h]":"00h",
    "[ah]":"00h",
    "[bh]":"00h",
    "[ch]":"00h",
    "[dh]":"00h",
    "[eh]":"00h",
    "[fh]":"00h"
    }
MemoryCode={
    "[0h]":"0000 0000 0000 0000 0000",
    "[1h]":"0000 0000 0000 0000 0001",
    "[2h]":"0000 0000 0000 0000 0010",
    "[3h]":"0000 0000 0000 0000 0011",
    "[4h]":"0000 0000 0000 0000 0100",
    "[5h]":"0000 0000 0000 0000 0101",
    "[6h]":"0000 0000 0000 0000 0110",
    "[7h]":"0000 0000 0000 0000 0111",
    "[8h]":"0000 0000 0000 0000 1000",
    "[9h]":"0000 0000 0000 0000 1001",
    "[ah]":"0000 0000 0000 0000 1010",
    "[bh]":"0000 0000 0000 0000 1011",
    "[ch]":"0000 0000 0000 0000 1100",
    "[dh]":"0000 0000 0000 0000 1101",
    "[eh]":"0000 0000 0000 0000 1110",
    "[fh]":"0000 0000 0000 0000 1111"
    }
def get_key(val):
    for key, value in RegistersCode.items():
        if val == value:
            return key
def get_mkey(val):
    for key, value in MemoryCode.items():
        if val == value:
            return key
#Example="mov [0h],Bx"
def OpCodeGenerator(Instruction):
    global InstructionSplit
    InstructionSplit=Instruction.lower().split(" ",1)
    global OpCode
    Code=InstructionSplit[0]
    OpCode=InstructionSetOpCode[Code]
    
    #print(InstructionSetOpCode[OpCode])
    
def OperandGenerator(InstructionSplit):
    global Operand2
    Operand2=""
   # print(InstructionSplit)
    OperandSplit=(InstructionSplit[1]).split(",",1)
    #print(OperandSplit)
    global Operand1
    
    if (len(OperandSplit)==1):
        
        Operand1=OperandSplit[0]
     #   print(Operand1)
    elif (len(OperandSplit)==2):
        Operand1=OperandSplit[0]
        Operand2=OperandSplit[1]
        
        print(Operand1)
        print(Operand2)
def MemoryComponentBool():
    global ImmediateValue
    ImmediateValue=""
    global Direct
    Direct=False
    global Immediate
    Immediate=False
    global RegisterDirect
    RegisterDirect=False
    global RegisterIndirect
    RegisterIndirect=False
    global RegisterRelativeOperand1
    RegisterRelativeOperand1=False
    global RegisterRelativeOperand2
    RegisterRelativeOperand2=False
    if (Operand1 in RegistersCode and Operand2 in RegistersCode):
        RegisterDirect=True
        print(1)
        return
    if (Operand2[0]!="[" and Operand2 not in RegistersCode):
        Immediate=True
        
        ImmediateValue=Operand2
        print(2)
    if (Operand1[0]=="[" and Operand2[0]=="["):
        global Error
        Error=True
        print(3)
        return
    if (Operand1[0]=='['):
        #Memory
        if (Operand1 in MemoryCode):
            Direct=True
            print(4)
        elif (Operand1.split("[",1)[1].split(']',1)[0] in RegistersCode):
            RegisterIndirect=True
            print(5)
        elif ("+" in Operand1):
            RegisterRelativeOperand1=True
            print(6)
    elif (Operand2[0]=='['):
        if (Operand2 in MemoryCode):
            Direct=True
            print(7)
        elif (Operand2.split("[",1)[1].split(']',1)[0] in RegistersCode):
            RegisterDirect=True
            print(8)
        elif ("+" in Operand2):
            RegisterRelativeOperand2=True
            print(9)
   
    
def ModGenerator():
    global MOD
    if (Immediate and Operand1 in RegistersCode):
        MOD="11"
        return
    if (RegisterDirect):
        MOD="11"
        return
    if (RegisterRelativeOperand1 or RegisterRelativeOperand2):
        MOD="01"
    elif (Operand1[0]=="[" or Operand2[0]=="["):
        MOD="00"
    else:
        MOD="-11"
def DGenerator():
    global D
    if (Immediate):
        D="0"
        return
    if (Operand2 in RegistersCode and (Operand1[0]=="[" or Operand1 in RegistersCode)):
        D="0"
    elif (Operand1 in RegistersCode and (Operand2[0]=="[" or Operand2 in RegistersCode)):
        D="1"
    else:
        D="-1"
    
def WGenerator():
    global W

    if(Operand2 in ["al","ah","bl","bh","cl","ch","dl","dh"]):
        W="0"
    elif(Operand2 in ["ax","bx","cx","dx"]):
        W="1"
    elif(Operand2 in MemoryCode ):
        W="0"
    elif(RegisterRelativeOperand2):
        W="0"
    elif(Immediate):
        if(len(ImmediateValue)==2 or len(ImmediateValue)==3 ):
            W="0"
        elif(len(ImmediateValue)==4 or len(ImmediateValue)==5):
            W="1"
        else:
            W="-1"
    else:
       # Error=True
        W="-1"
def RegGenerator():
    global REG
    global R_M
    global Displacement
    REG=-111
    R_M=-111
    Displacement=""
    if (D=="1"):
        if (MOD=="11"): 
            REG=RegistersCode[Operand1]
            R_M=RegistersCode[Operand2]
        elif (MOD=="01"):
             Displacement=Operand2[4:6]
             REG=RegistersCode[Operand1]
             R_M="111" #If want to change value of BP,KOSOMAK then we need add condition here and refer to table
            
        elif (MOD=="00"):
            REG=RegistersCode[Operand1]
            if(Operand2 in MemoryCode):
                R_M="110" #Refer to Sir tABLE IN SLIDES
            elif (Operand2 in RegistersCode):
                R_M="111"
       
            
    elif(D=='0'):
        if (MOD=="11"):
            R_M=RegistersCode[Operand1]
            if(not Immediate):
                REG=RegistersCode[Operand2]
            else:
                REG="000"
        elif (MOD=="01"):
             
             Displacement=Operand1[4:6]
             R_M="111"
             if(not Immediate):
                 REG=RegistersCode[Operand2]
             else:
                 REG="000"
        elif (MOD=="00"):
            if(Operand1 in MemoryCode):
                R_M="110"
            elif(Operand1 in RegistersCode):
                R_M="111"
            if(not Immediate):
                REG=RegistersCode[Operand2]
            else:
                REG="000"
    
def MachineCodeGenerator(Instruction):
    global MachineCode
    global Operand
    OpCodeGenerator(Instruction)
    OperandGenerator(InstructionSplit)
    if (Operand2!=""):
        MemoryComponentBool()
        DGenerator()
        ModGenerator()
        WGenerator()
        RegGenerator()
        #Mismatch()
        MachineCode=OpCode+" "+D+" "+W+" "+MOD+" "+REG+" "+R_M+" "+str(ImmediateValue)+" "+str(Displacement)
        global final_macheinecode
        temp_macheinecode=OpCode+D+W+MOD+REG+R_M+str(ImmediateValue)+str(Displacement)
        if(temp_macheinecode[-1]=='h'):
            if(len(temp_macheinecode)==19):
                ini_string = temp_macheinecode[-3]+temp_macheinecode[-2]
                res = "{0:08b}".format(int(ini_string, 8))
                temp_macheinecode=temp_macheinecode[0:-3]
                temp_macheinecode=temp_macheinecode+res
            if(len(temp_macheinecode)==21):
               ini_string = temp_macheinecode[-5]+temp_macheinecode[-4]+temp_macheinecode[-3]+temp_macheinecode[-2]
               res = "{0:08b}".format(int(ini_string, 16))
               temp_macheinecode=temp_macheinecode[0:-5]
               temp_macheinecode=temp_macheinecode+res
        final_macheinecode=temp_macheinecode[0:8]+" "+temp_macheinecode[8:16]+" "+temp_macheinecode[16:24]+" "+temp_macheinecode[24:32]+" "
        print(final_macheinecode)   
        
    else:
        if (Operand1 in RegistersCode):
            Operand=RegistersCode[Operand1]
        elif (Operand1 in MemoryCode):
            Operand=110
        elif (Operand1[1:3] in RegistersCode):
            Operand=111
        MachineCode=OpCode+" "+"x"+" "+"x"+" "+"x"+" "+Operand
        # SET Unnecessary Bits to 0 for Unary Operators
cycles=""
def Mismatch(instruction):
    global invalid
    if (Operand2 in ["ax","bx","cx","dx"] and Operand1 in ["al","ah","bl","bh","cl","ch","dl","dh"]):
        Invalid=True
        return
    elif(Operand1 in ["ax","bx","cx","dx"] and Operand2 in ["al","ah","bl","bh","cl","ch","dl","dh"]):
        Invalid=True
        return
    elif(D=="-1"or W=="-1" or MOD=="-11" or instruction not in InstructionSetOpCode):
        Invalid=True
        return
    #DisplacementCHECK
def MOV():
    if(D=='0'):
      if(MOD=="11"):
         global cycles
         cycles=""
         if(not Immediate):
              if(W=="1"):
                  RegistersValue[get_key(R_M)]=RegistersValue[get_key(REG)]
              elif(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                      if(get_key(R_M) in ["al","bl","cl","dl"]):
                          RegistersValue[get_key(R_M)][3]=RegistersValue[get_key(REG)][3]
                          RegistersValue[get_key(R_M)][2]=RegistersValue[get_key(REG)][2]
                          
                  
                      elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=RegistersValue[get_key(REG)][3]
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=RegistersValue[get_key(REG)][2]
                          
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       if(get_key(R_M) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(R_M)][3]=RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]
                           RegistersValue[get_key(R_M)][2]=RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]
                   
                       elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]  
         else:
             if(W=="1"):
                 for i in range(4):
                     RegistersValue[get_key(R_M)][i]=ImmediateValue[i]
             elif(W=="0"):
                 if(get_key(R_M) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(R_M)][3]=ImmediateValue[1]
                     RegistersValue[get_key(R_M)][2]=ImmediateValue[0]
                 elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=ImmediateValue[1]
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=ImmediateValue[0] 
                 else:
                    for i in range(2):
                        RegistersValue[get_key(R_M)][i+2]=ImmediateValue[i]
                    
      elif(MOD=="00"):
        
        if(R_M=="110"):#Direct
          if(not Immediate):#
            cycles="s"
            if(W=="0"):
               if(get_key(REG) in ["al","bl","cl","dl"]):
                  MemoryValue[Operand1]=RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3]+'h'
               elif(get_key(REG) in ["ah","bh","ch","dh"]):
                  MemoryValue[Operand1]=RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]+RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]+'h'
            elif(W=="1"):
                  
                  MemoryValue[Operand1]=RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3]+'h'
                  MemoryValue[hex(int(Operand1[1],16)+1)+'h']=RegistersValue[get_key(REG)][0]+RegistersValue[get_key(REG)][1]+'h'
          else:#
             if(W=="0"):
                 MemoryValue[Operand1]=Operand2
             elif(W=="1"):
                 MemoryValue[Operand1]=Operand2[2]+Operand2[3]+'h'
                 MemoryValue[hex(int(Operand1[1],16)+1)+'h']=Operand2[0]+Operand2[1]+'h'#
                 
                 
                 
                 
        elif(R_M=="111"):#rEGISTERiNDIRECT
         if(not Immediate):#
            cycles="s"
            if(W=="0"):
                if(get_key(REG) in ["al","bl","cl","dl"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3])+'h'
                elif(get_key(REG) in ["ah","bh","ch","dh"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1])+'h'
            elif(W=="1"):
                  
                  MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3])+'h'
                  MemoryValue[hex(int("".join(RegistersValue[Operand1]),16)+1)+'h']=str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1])+'h'    
         else:#
            if(W=="0"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=Operand2
            elif(W=="1"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=Operand2[2]+Operand2[3]+'h'
                MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)[2:]+'h']=Operand2[0]+Operand2[1]+'h'
                #
      elif(MOD=="01"): #Register Relative
        if(not Immediate):#
            cycles="s"
            if(R_M=="111"):
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))[2:]+'h']=str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3])+'h'
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))[2:]+'h']=str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1])+'h'
                elif(W=="1"):
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))[2:]+'h']=str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3])+'h'
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))[2:]+'h']=str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1])+'h'  
        else:#
           if(W=="0"):
               MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))[2:]+'h']=Operand2
           elif(W=="1"):
               MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))[2:]+'h']=Operand2[2]+Operand2[3]+'h'
               MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))[2:]+'h']=Operand2[0]+Operand2[1]+'h'
               #
            
    elif(D=="1"):
        if(MOD=="11"):
                cycles=""
                if(W=='1'):
                    RegistersValue[get_key(REG)]=RegistersValue[get_key(R_M)]
                elif(W=='0'):
                    if(get_key(R_M) in ["al","bl","cl","dl"]):
                        if(get_key(REG) in ["al","bl","cl","dl"]):
                            RegistersValue[get_key(REG)][3]=RegistersValue[get_key(R_M)][3]
                            RegistersValue[get_key(REG)][2]=RegistersValue[get_key(R_M)][2]
                    
                        elif(get_key(REG) in ["ah","bh","ch","dh"]):
                            RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=RegistersValue[get_key(R_M)][3]
                            RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=RegistersValue[get_key(R_M)][2]
                    elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                         if(get_key(REG) in ["al","bl","cl","dl"]):
                             RegistersValue[get_key(REG)][3]=RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]
                             RegistersValue[get_key(REG)][2]=RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]
                     
                         elif(get_key(REG) in ["ah","bh","ch","dh"]):
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0] 
        elif(MOD=="00"):
          if(R_M=="110"):#Direct
              cycles="f"
              if(W=="0"):
                 if(get_key(REG) in ["al","bl","cl","dl"]):
                    RegistersValue[get_key(REG)][2]=MemoryValue[Operand2][0]
                    RegistersValue[get_key(REG)][3]=MemoryValue[Operand2][1]
                 elif(get_key(REG) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=MemoryValue[Operand2][0]
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=MemoryValue[Operand2][1]
                 else:
                     RegistersValue[get_key(REG)][2]=MemoryValue[Operand2][0]
                     RegistersValue[get_key(REG)][3]=MemoryValue[Operand2][1]
          elif(R_M=="111"):#Register Indirect
              cycles="f"
              if(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(REG)][2]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0]
                     RegistersValue[get_key(REG)][3]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0]
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1]
                  else:
                      RegistersValue[get_key(REG)][2]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0]
                      RegistersValue[get_key(REG)][3]=MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1]
        elif(MOD=="01"):
            cycles="f"
            if(R_M=="111"):#Register Indirect
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       RegistersValue[get_key(REG)][2]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0]
                       RegistersValue[get_key(REG)][3]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1]
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0]
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1]
                    else:
                        RegistersValue[get_key(REG)][2]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0]
                        RegistersValue[get_key(REG)][3]=MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1]
            
#def Execute():


    #appply invalid and mismatch check here
        



def ADD():
    global cycles
    if(D=='0'):
      if(MOD=="11"):
         if(not Immediate):
              cycles="e"
              if(W=='1'):
                  RegistersValue[get_key(R_M)]=list(hex(int("".join(RegistersValue[get_key(R_M)]),16)+int("".join(RegistersValue[get_key(REG)]),16))[2:].zfill(4))
              elif(W=='0'):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                      if(get_key(R_M) in ["al","bl","cl","dl"]):
                          RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)+int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)+int(RegistersValue[get_key(REG)][2],16))[2:]
                  
                      elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)+int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)+int(RegistersValue[get_key(REG)][2],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       if(get_key(R_M) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)+int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)+int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
                   
                       elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(R_M)][1],16)+int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(R_M)][0],16)+int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
         else:
             cycles="e"
             if(W=="1"):
                 for i in range(4):
                     RegistersValue[get_key(R_M)][i]=hex(int(RegistersValue[get_key(R_M)][i],16)+int(ImmediateValue[i],16))[2:]
             elif(W=="0"):
                 if(get_key(R_M) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)+int(ImmediateValue[1],16))[2:]
                     RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)+int(ImmediateValue[0],16))[2:]
                 elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)+int(ImmediateValue[1],16))[2:]
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)+int(ImmediateValue[0],16))[2:]
                 else:
                    cycles="e"
                    for i in range(2):
                        RegistersValue[get_key(R_M)][i+2]=hex(int(RegistersValue[get_key(R_M)][i+2],16)+int(ImmediateValue[i],16))[2:]
                    
      elif(MOD=="00"):
        if(R_M=="110"):#Direct
         if(not Immediate):
            cycles="fe"
            if(W=="0"):
               if(get_key(REG) in ["al","bl","cl","dl"]):#
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)+int(RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3],16))[2:].zfill(2)+'h'
               elif(get_key(REG) in ["ah","bh","ch","dh"]):
                  MemoryValue[Operand1]=int(MemoryValue[Operand1],16)+int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]+RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)[2:].zfill(2)+'h'
            elif(W=="1"):
                  print("Invalid")
                  
         else:
                cycles="fe"
                if(W=="0"):
                    MemoryValue[Operand1]= hex(int(MemoryValue[Operand1][:2],16)+int(Operand2[:2],16))[2:].zfill(2)+'h'
                elif(W=="1"):
                    print("Invalid")
        elif(R_M=="111"):#rEGISTERiNDIRECT
         cycles="fe"
         if(not Immediate):
            
            if(W=="0"):
                if(get_key(REG) in ["al","bl","cl","dl"]):############################################################
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)+int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                elif(get_key(REG) in ["ah","bh","ch","dh"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)+int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  
                  MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)+int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                  MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h'],16)+int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'    
         else:#
            if(W=="0"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)+int(Operand2[:2],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                print("Invalid")
      elif(MOD=="01"): #Register Relative
       cycles="fe"
       if(not Immediate):
            if(R_M=="111"):
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int( MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'])+int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)+int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
                elif(W=="1"):
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)+int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h'],16)+int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'  
       
       else:#
             if(W=="0"):
                 MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'][:2],16)+int(Operand2[:2],16))[2:].zfill(2)+'h'
             elif(W=="1"):
                 print("Invalid")
          #            
    elif(D=="1"):
        
        if(MOD=="11"):
                cycles="e"
                if(W=='1'):
                    RegistersValue[get_key(REG)]=list(hex(int("".join(RegistersValue[get_key(REG)]),16)+int("".join(RegistersValue[get_key(R_M)]),16))[2:].zfill(4))
                elif(W=='0'):
                    if(get_key(R_M) in ["al","bl","cl","dl"]):
                        if(get_key(REG) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(RegistersValue[get_key(R_M)][2],16))[2:]
                    
                        elif(get_key(REG) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)+int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)+int(RegistersValue[get_key(R_M)][2],16))[2:]
                    elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                         if(get_key(REG) in ["al","bl","cl","dl"]):
                             RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
                     
                         elif(get_key(REG) in ["ah","bh","ch","dh"]):
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(REG)][1],16)+int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(REG)][0],16)+int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
        elif(MOD=="00"):
          cycles="fe"
          if(R_M=="110"):#Direct
              if(W=="0"):
                 if(get_key(REG) in ["al","bl","cl","dl"]):
                    RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue[Operand2][1],16))[2:]
                 elif(get_key(REG) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)+int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)+int(MemoryValue[Operand2][1],16))[2:]
                 else:
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue[Operand2][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue[Operand2][1],16))[2:]
          elif(R_M=="111"):#Register Indirect
              cycles="fe"
              if(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  else:
                      RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                      RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
        elif(MOD=="01"):
            cycles="fe"
            if(R_M=="111"):#Register Indirect
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    else:
                        RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                        RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)+int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
            


def MUL():
    global cycles
    if(D=='0'):
      if(MOD=="11"):
         if(not Immediate):
              cycles="e"
              if(W=='1'):
                  RegistersValue[get_key(R_M)]=list(hex(int("".join(RegistersValue[get_key(R_M)]),16)*int("".join(RegistersValue[get_key(REG)]),16))[2:].zfill(4))
              elif(W=='0'):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                      if(get_key(R_M) in ["al","bl","cl","dl"]):
                          RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)*int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)*int(RegistersValue[get_key(REG)][2],16))[2:]
                  
                      elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)*int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)*int(RegistersValue[get_key(REG)][2],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       if(get_key(R_M) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)*int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)*int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
                   
                       elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(R_M)][1],16)*int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(R_M)][0],16)*int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
         else:
             cycles="e"
             if(W=="1"):
                 for i in range(4):
                     RegistersValue[get_key(R_M)][i]=hex(int(RegistersValue[get_key(R_M)][i],16)*int(ImmediateValue[i],16))[2:]
             elif(W=="0"):
                 if(get_key(R_M) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)*int(ImmediateValue[1],16))[2:]
                     RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)*int(ImmediateValue[0],16))[2:]
                 elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)*int(ImmediateValue[1],16))[2:]
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)*int(ImmediateValue[0],16))[2:]
                 else:
                    cycles="e"
                    for i in range(2):
                        RegistersValue[get_key(R_M)][i+2]=hex(int(RegistersValue[get_key(R_M)][i+2],16)*int(ImmediateValue[i],16))[2:]
                    
      elif(MOD=="00"):
        if(R_M=="110"):#Direct
         if(not Immediate):
            cycles="fe"
            if(W=="0"):
               if(get_key(REG) in ["al","bl","cl","dl"]):#
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)*int(RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3],16))[2:].zfill(2)+'h'
               elif(get_key(REG) in ["ah","bh","ch","dh"]):
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)*int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]+RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  print("Invalid")
                  
         else:
                if(W=="0"):
                    MemoryValue[Operand1]= hex(int(MemoryValue[Operand1][:2],16)*int(Operand2[:2],16))[2:].zfill(2)+'h'
                elif(W=="1"):
                    print("Invalid")
        elif(R_M=="111"):#rEGISTERiNDIRECT
         if(not Immediate):
            if(W=="0"):
                if(get_key(REG) in ["al","bl","cl","dl"]):############################################################
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)*int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                elif(get_key(REG) in ["ah","bh","ch","dh"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)*int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  
                  MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)*int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                  MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h'],16)*int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'    
         else:#
            if(W=="0"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)*int(Operand2[:2],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                print("Invalid")
      elif(MOD=="01"): #Register Relative
       if(not Immediate):
            if(R_M=="111"):
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int( MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'])*int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)*int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
                elif(W=="1"):
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)*int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h'],16)*int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'  
       
       else:#
             if(W=="0"):
                 MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'][:2],16)*int(Operand2[:2],16))[2:].zfill(2)+'h'
             elif(W=="1"):
                 print("Invalid")
          #            
    elif(D=="1"):
        if(MOD=="11"):
                if(W=='1'):
                    RegistersValue[get_key(REG)]=list(hex(int("".join(RegistersValue[get_key(REG)]),16)*int("".join(RegistersValue[get_key(R_M)]),16))[2:].zfill(4))
                elif(W=='0'):
                    if(get_key(R_M) in ["al","bl","cl","dl"]):
                        if(get_key(REG) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(RegistersValue[get_key(R_M)][2],16))[2:]
                    
                        elif(get_key(REG) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)*int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)*int(RegistersValue[get_key(R_M)][2],16))[2:]
                    elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                         if(get_key(REG) in ["al","bl","cl","dl"]):
                             RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
                     
                         elif(get_key(REG) in ["ah","bh","ch","dh"]):
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(REG)][1],16)*int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(REG)][0],16)*int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
        elif(MOD=="00"):
          if(R_M=="110"):#Direct
              if(W=="0"):
                 if(get_key(REG) in ["al","bl","cl","dl"]):
                    RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue[Operand2][1],16))[2:]
                 elif(get_key(REG) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)*int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)*int(MemoryValue[Operand2][1],16))[2:]
                 else:
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue[Operand2][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue[Operand2][1],16))[2:]
          elif(R_M=="111"):#Register Indirect
              if(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  else:
                      RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                      RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
        elif(MOD=="01"):
            if(R_M=="111"):#Register Indirect
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    else:
                        RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                        RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)*int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
            

def DIV():
    if(D=='0'):
      if(MOD=="11"):
         if(not Immediate):
              if(W=='1'):
                  RegistersValue[get_key(R_M)]=list(hex(int("".join(RegistersValue[get_key(R_M)]),16)/int("".join(RegistersValue[get_key(REG)]),16))[2:].zfill(4))
              elif(W=='0'):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                      if(get_key(R_M) in ["al","bl","cl","dl"]):
                          RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)/int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)/int(RegistersValue[get_key(REG)][2],16))[2:]
                  
                      elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)/int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)/int(RegistersValue[get_key(REG)][2],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       if(get_key(R_M) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)/int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)/int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
                   
                       elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(R_M)][1],16)/int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(R_M)][0],16)/int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
         else:
             if(W=="1"):
                 for i in range(4):
                     RegistersValue[get_key(R_M)][i]=hex(int(RegistersValue[get_key(R_M)][i],16)/int(ImmediateValue[i],16))[2:]
             elif(W=="0"):
                 if(get_key(R_M) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)/int(ImmediateValue[1],16))[2:]
                     RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)/int(ImmediateValue[0],16))[2:]
                 elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)/int(ImmediateValue[1],16))[2:]
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)/int(ImmediateValue[0],16))[2:]
                 else:
                    for i in range(2):
                        RegistersValue[get_key(R_M)][i+2]=hex(int(RegistersValue[get_key(R_M)][i+2],16)/int(ImmediateValue[i],16))[2:]
                    
      elif(MOD=="00"):
        if(R_M=="110"):#Direct
         if(not Immediate):
            if(W=="0"):
               if(get_key(REG) in ["al","bl","cl","dl"]):#
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)/int(RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3],16))[2:].zfill(2)+'h'
               elif(get_key(REG) in ["ah","bh","ch","dh"]):
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)/int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]+RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  print("Invalid")
                  
         else:
                if(W=="0"):
                    MemoryValue[Operand1]= hex(int(MemoryValue[Operand1][:2],16)/int(Operand2[:2],16))[2:].zfill(2)+'h'
                elif(W=="1"):
                    print("Invalid")
        elif(R_M=="111"):#rEGISTERiNDIRECT
         if(not Immediate):
            if(W=="0"):
                if(get_key(REG) in ["al","bl","cl","dl"]):############################################################
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)/int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                elif(get_key(REG) in ["ah","bh","ch","dh"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)/int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  
                  MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)/int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                  MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h'],16)/int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'    
         else:#
            if(W=="0"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)/int(Operand2[:2],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                print("Invalid")
      elif(MOD=="01"): #Register Relative
       if(not Immediate):
            if(R_M=="111"):
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int( MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'])/int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)/int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
                elif(W=="1"):
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)/int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h'],16)/int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'  
       
       else:#
             if(W=="0"):
                 MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'][:2],16)/int(Operand2[:2],16))[2:].zfill(2)+'h'
             elif(W=="1"):
                 print("Invalid")
          #            
    elif(D=="1"):
        if(MOD=="11"):
                if(W=='1'):
                    RegistersValue[get_key(REG)]=list(hex(int("".join(RegistersValue[get_key(REG)]),16)/int("".join(RegistersValue[get_key(R_M)]),16))[2:].zfill(4))
                elif(W=='0'):
                    if(get_key(R_M) in ["al","bl","cl","dl"]):
                        if(get_key(REG) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(RegistersValue[get_key(R_M)][2],16))[2:]
                    
                        elif(get_key(REG) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)/int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)/int(RegistersValue[get_key(R_M)][2],16))[2:]
                    elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                         if(get_key(REG) in ["al","bl","cl","dl"]):
                             RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
                     
                         elif(get_key(REG) in ["ah","bh","ch","dh"]):
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(REG)][1],16)/int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(REG)][0],16)/int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
        elif(MOD=="00"):
          if(R_M=="110"):#Direct
              if(W=="0"):
                 if(get_key(REG) in ["al","bl","cl","dl"]):
                    RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue[Operand2][1],16))[2:]
                 elif(get_key(REG) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)/int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)/int(MemoryValue[Operand2][1],16))[2:]
                 else:
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue[Operand2][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue[Operand2][1],16))[2:]
          elif(R_M=="111"):#Register Indirect
              if(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  else:
                      RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                      RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
        elif(MOD=="01"):
            if(R_M=="111"):#Register Indirect
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    else:
                        RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                        RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)/int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
            

def SUB():
    if(D=='0'):
      if(MOD=="11"):
         if(not Immediate):
              if(W=='1'):
                  RegistersValue[get_key(R_M)]=list(hex(int("".join(RegistersValue[get_key(R_M)]),16)-int("".join(RegistersValue[get_key(REG)]),16))[2:].zfill(4))
              elif(W=='0'):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                      if(get_key(R_M) in ["al","bl","cl","dl"]):
                          RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)-int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)-int(RegistersValue[get_key(REG)][2],16))[2:]
                  
                      elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)-int(RegistersValue[get_key(REG)][3],16))[2:]
                          RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)-int(RegistersValue[get_key(REG)][2],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       if(get_key(R_M) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)-int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)-int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
                   
                       elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(R_M)][1],16)-int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:]
                           RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(R_M)][0],16)-int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16))[2:]
         else:
             if(W=="1"):
                 for i in range(4):
                     RegistersValue[get_key(R_M)][i]=hex(int(RegistersValue[get_key(R_M)][i],16)-int(ImmediateValue[i],16))[2:]
             elif(W=="0"):
                 if(get_key(R_M) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(R_M)][3]=hex(int(RegistersValue[get_key(R_M)][3],16)-int(ImmediateValue[1],16))[2:]
                     RegistersValue[get_key(R_M)][2]=hex(int(RegistersValue[get_key(R_M)][2],16)-int(ImmediateValue[0],16))[2:]
                 elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16)-int(ImmediateValue[1],16))[2:]
                    RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16)-int(ImmediateValue[0],16))[2:]
                 else:
                    for i in range(2):
                        RegistersValue[get_key(R_M)][i+2]=hex(int(RegistersValue[get_key(R_M)][i+2],16)-int(ImmediateValue[i],16))[2:]
                    
      elif(MOD=="00"):
        if(R_M=="110"):#Direct
         if(not Immediate):
            if(W=="0"):
               if(get_key(REG) in ["al","bl","cl","dl"]):#
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)-int(RegistersValue[get_key(REG)][2]+RegistersValue[get_key(REG)][3],16))[2:].zfill(2)+'h'
               elif(get_key(REG) in ["ah","bh","ch","dh"]):
                  MemoryValue[Operand1]=hex(int(MemoryValue[Operand1],16)-int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]+RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  print("Invalid")
                  
         else:
                if(W=="0"):
                    MemoryValue[Operand1]= hex(int(MemoryValue[Operand1][:2],16)-int(Operand2[:2],16))[2:].zfill(2)+'h'
                elif(W=="1"):
                    print("Invalid")
        elif(R_M=="111"):#rEGISTERiNDIRECT
         if(not Immediate):
            if(W=="0"):
                if(get_key(REG) in ["al","bl","cl","dl"]):############################################################
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)-int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                elif(get_key(REG) in ["ah","bh","ch","dh"]):
                   MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)-int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
            elif(W=="1"):
                  
                  MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)-int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                  MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1])[2:],16)+1)+'h'],16)-int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'    
         else:#
            if(W=="0"):
                MemoryValue["".join(RegistersValue[Operand1])[2:]+'h']=hex(int(MemoryValue["".join(RegistersValue[Operand1])[2:]+'h'],16)-int(Operand2[:2],16))[2:].zfill(2)+'h'
            elif(W=="1"):
                print("Invalid")
      elif(MOD=="01"): #Register Relative
       if(not Immediate):
            if(R_M=="111"):
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int( MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'])-int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)-int(str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0])+str(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]),16))[2:].zfill(2)+'h'
                elif(W=="1"):
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'],16)-int(str(RegistersValue[get_key(REG)][2])+str(RegistersValue[get_key(REG)][3]),16))[2:].zfill(2)+'h'
                      MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+1+int(Displacement[0],16))+'h'],16)-int(str(RegistersValue[get_key(REG)][0])+str(RegistersValue[get_key(REG)][1]),16))[2:].zfill(2)+'h'  
       
       else:#
             if(W=="0"):
                 MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h']=hex(int(MemoryValue[hex(int("".join(RegistersValue[Operand1[1:3]])[2:],16)+int(Displacement[0],16))+'h'][:2],16)-int(Operand2[:2],16))[2:].zfill(2)+'h'
             elif(W=="1"):
                 print("Invalid")
          #            
    elif(D=="1"):
        if(MOD=="11"):
                if(W=='1'):
                    RegistersValue[get_key(REG)]=list(hex(int("".join(RegistersValue[get_key(REG)]),16)-int("".join(RegistersValue[get_key(R_M)]),16))[2:].zfill(4))
                elif(W=='0'):
                    if(get_key(R_M) in ["al","bl","cl","dl"]):
                        if(get_key(REG) in ["al","bl","cl","dl"]):
                           RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(RegistersValue[get_key(R_M)][2],16))[2:]
                    
                        elif(get_key(REG) in ["ah","bh","ch","dh"]):
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)-int(RegistersValue[get_key(R_M)][3],16))[2:]
                           RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)-int(RegistersValue[get_key(R_M)][2],16))[2:]
                    elif(get_key(R_M) in ["ah","bh","ch","dh"]):
                         if(get_key(REG) in ["al","bl","cl","dl"]):
                             RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
                     
                         elif(get_key(REG) in ["ah","bh","ch","dh"]):
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(REG)][1],16)-int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][1],16))[2:]
                             RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(REG)][0],16)-int(RegistersValue[get_key(str(int(R_M)-100).zfill(3))][0],16))[2:]
        elif(MOD=="00"):
          if(R_M=="110"):#Direct
              if(W=="0"):
                 if(get_key(REG) in ["al","bl","cl","dl"]):
                    RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue[Operand2][1],16))[2:]
                 elif(get_key(REG) in ["ah","bh","ch","dh"]):
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)-int(MemoryValue[Operand2][0],16))[2:]
                    RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)-int(MemoryValue[Operand2][1],16))[2:]
                 else:
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue[Operand2][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue[Operand2][1],16))[2:]
          elif(R_M=="111"):#Register Indirect
              if(W=="0"):
                  if(get_key(REG) in ["al","bl","cl","dl"]):
                     RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  elif(get_key(REG) in ["ah","bh","ch","dh"]):
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                     RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
                  else:
                      RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][0],16))[2:]
                      RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue["".join(RegistersValue[Operand2])[2:]+'h'][1],16))[2:]
        elif(MOD=="01"):
            if(R_M=="111"):#Register Indirect
                if(W=="0"):
                    if(get_key(REG) in ["al","bl","cl","dl"]):
                       RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    elif(get_key(REG) in ["ah","bh","ch","dh"]):
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][0]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][0],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                       RegistersValue[get_key(str(int(REG)-100).zfill(3))][1]=hex(int(RegistersValue[get_key(str(int(REG)-100).zfill(3))][1],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
                    else:
                        RegistersValue[get_key(REG)][2]=hex(int(RegistersValue[get_key(REG)][2],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][0],16))[2:]
                        RegistersValue[get_key(REG)][3]=hex(int(RegistersValue[get_key(REG)][3],16)-int(MemoryValue["".join(RegistersValue[Operand2[1:3]])[2:]+'h'][1],16))[2:]
            
def INC():
    Example="add "+get_key(Operand)+",01h"
    MachineCodeGenerator(Example)
    ADD()
def DEC():
    Example="sub "+get_key(Operand)+",01h"
    MachineCodeGenerator(Example)
    SUB()
   
def AND():
    if (Operand1 in RegistersCode and Operand2 in RegistersCode):
        RegistersValue[Operand1]=list(hex(int("".join(RegistersValue[Operand1]),16) & int("".join(RegistersValue[Operand2]),16))[2:].zfill(4))
def OR():
    if (Operand1 in RegistersCode and Operand2 in RegistersCode):
        RegistersValue[Operand1]=list(hex(int("".join(RegistersValue[Operand1]),16)|int("".join(RegistersValue[Operand2]),16))[2:].zfill(4))    
def XOR():
    if (Operand1 in RegistersCode and Operand2 in RegistersCode):
        RegistersValue[Operand1]=list(hex(int("".join(RegistersValue[Operand1]),16) ^ int("".join(RegistersValue[Operand2]),16))[2:].zfill(4))
            
#def Execute():


    #appply invalid and mismatch check here
        




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(972, 699)
        font = QtGui.QFont()
        font.setItalic(False)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(140, 160, 141, 41))
        self.graphicsView.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView.setObjectName("graphicsView")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 160, 61, 41))
       
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(140, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_2.setFont(font)
        self.graphicsView_2.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_2.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.graphicsView_3 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_3.setGeometry(QtCore.QRect(210, 200, 71, 41))
        self.graphicsView_3.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(160, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(230, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.AH = QtWidgets.QLineEdit(self.centralwidget)
        self.AH.setGeometry(QtCore.QRect(140, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.AH.setFont(font)
        self.AH.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.AH.setAlignment(QtCore.Qt.AlignCenter)
        self.AH.setReadOnly(True)
        self.AH.setObjectName("AH")
        self.AL = QtWidgets.QLineEdit(self.centralwidget)
        self.AL.setGeometry(QtCore.QRect(210, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.AL.setFont(font)
        self.AL.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.AL.setAlignment(QtCore.Qt.AlignCenter)
        self.AL.setReadOnly(True)
        self.AL.setObjectName("AL")
        self.graphicsView_4 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_4.setGeometry(QtCore.QRect(330, 160, 141, 41))
        self.graphicsView_4.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_4.setObjectName("graphicsView_4")
        self.graphicsView_5 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_5.setGeometry(QtCore.QRect(520, 160, 141, 41))
        self.graphicsView_5.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_5.setObjectName("graphicsView_5")
        self.graphicsView_6 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_6.setGeometry(QtCore.QRect(140, 340, 141, 41))
        self.graphicsView_6.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_6.setObjectName("graphicsView_6")
        self.graphicsView_7 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_7.setGeometry(QtCore.QRect(710, 160, 141, 41))
        self.graphicsView_7.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_7.setObjectName("graphicsView_7")
        self.graphicsView_8 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_8.setGeometry(QtCore.QRect(520, 340, 141, 41))
        self.graphicsView_8.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_8.setObjectName("graphicsView_8")
        self.graphicsView_9 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_9.setGeometry(QtCore.QRect(330, 340, 141, 41))
        self.graphicsView_9.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_9.setObjectName("graphicsView_9")
        self.graphicsView_10 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_10.setGeometry(QtCore.QRect(710, 340, 141, 41))
        self.graphicsView_10.setStyleSheet("background-color: rgb(173, 173, 173);")
        self.graphicsView_10.setObjectName("graphicsView_10")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(380, 160, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(570, 160, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(760, 160, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(190, 340, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(380, 340, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(580, 340, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(770, 340, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.graphicsView_11 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_11.setGeometry(QtCore.QRect(400, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_11.setFont(font)
        self.graphicsView_11.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_11.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_11.setObjectName("graphicsView_11")
        self.graphicsView_12 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_12.setGeometry(QtCore.QRect(330, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.graphicsView_12.setFont(font)
        self.graphicsView_12.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_12.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_12.setObjectName("graphicsView_12")
        self.graphicsView_13 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_13.setGeometry(QtCore.QRect(520, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_13.setFont(font)
        self.graphicsView_13.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_13.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_13.setObjectName("graphicsView_13")
        self.graphicsView_14 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_14.setGeometry(QtCore.QRect(590, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_14.setFont(font)
        self.graphicsView_14.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_14.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_14.setObjectName("graphicsView_14")
        self.graphicsView_15 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_15.setGeometry(QtCore.QRect(710, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_15.setFont(font)
        self.graphicsView_15.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_15.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_15.setObjectName("graphicsView_15")
        self.graphicsView_16 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_16.setGeometry(QtCore.QRect(780, 200, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.graphicsView_16.setFont(font)
        self.graphicsView_16.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.graphicsView_16.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.graphicsView_16.setObjectName("graphicsView_16")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(350, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(420, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(540, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(610, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("")
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(730, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(800, 200, 51, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.BH = QtWidgets.QLineEdit(self.centralwidget)
        self.BH.setGeometry(QtCore.QRect(330, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.BH.setFont(font)
        self.BH.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.BH.setAlignment(QtCore.Qt.AlignCenter)
        self.BH.setReadOnly(True)
        self.BH.setObjectName("BH")
        self.BL = QtWidgets.QLineEdit(self.centralwidget)
        self.BL.setGeometry(QtCore.QRect(400, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.BL.setFont(font)
        self.BL.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.BL.setAlignment(QtCore.Qt.AlignCenter)
        self.BL.setReadOnly(True)
        self.BL.setObjectName("BL")
        self.CH = QtWidgets.QLineEdit(self.centralwidget)
        self.CH.setGeometry(QtCore.QRect(520, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.CH.setFont(font)
        self.CH.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.CH.setAlignment(QtCore.Qt.AlignCenter)
        self.CH.setReadOnly(True)
        self.CH.setObjectName("CH")
        self.CL = QtWidgets.QLineEdit(self.centralwidget)
        self.CL.setGeometry(QtCore.QRect(590, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.CL.setFont(font)
        self.CL.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.CL.setAlignment(QtCore.Qt.AlignCenter)
        self.CL.setReadOnly(True)
        self.CL.setObjectName("CL")
        self.DH = QtWidgets.QLineEdit(self.centralwidget)
        self.DH.setGeometry(QtCore.QRect(710, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.DH.setFont(font)
        self.DH.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.DH.setAlignment(QtCore.Qt.AlignCenter)
        self.DH.setReadOnly(True)
        self.DH.setObjectName("DH")
        self.DL = QtWidgets.QLineEdit(self.centralwidget)
        self.DL.setGeometry(QtCore.QRect(780, 240, 71, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.DL.setFont(font)
        self.DL.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.DL.setAlignment(QtCore.Qt.AlignCenter)
        self.DL.setReadOnly(True)
        self.DL.setObjectName("DL")
        self.SP = QtWidgets.QLineEdit(self.centralwidget)
        self.SP.setGeometry(QtCore.QRect(140, 380, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.SP.setFont(font)
        self.SP.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.SP.setAlignment(QtCore.Qt.AlignCenter)
        self.SP.setReadOnly(True)
        self.SP.setObjectName("SP")
        self.BP = QtWidgets.QLineEdit(self.centralwidget)
        self.BP.setGeometry(QtCore.QRect(330, 380, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.BP.setFont(font)
        self.BP.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.BP.setAlignment(QtCore.Qt.AlignCenter)
        self.BP.setReadOnly(True)
        self.BP.setObjectName("BP")
        self.SI = QtWidgets.QLineEdit(self.centralwidget)
        self.SI.setGeometry(QtCore.QRect(520, 380, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.SI.setFont(font)
        self.SI.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.SI.setAlignment(QtCore.Qt.AlignCenter)
        self.SI.setReadOnly(True)
        self.SI.setObjectName("SI")
        self.DI = QtWidgets.QLineEdit(self.centralwidget)
        self.DI.setGeometry(QtCore.QRect(710, 380, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.DI.setFont(font)
        self.DI.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.DI.setAlignment(QtCore.Qt.AlignCenter)
        self.DI.setReadOnly(True)
        self.DI.setObjectName("DI")
        self.mF = QtWidgets.QLineEdit(self.centralwidget)
        self.mF.setGeometry(QtCore.QRect(1070, 40, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mF.setFont(font)
        self.mF.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mF.setAlignment(QtCore.Qt.AlignCenter)
        self.mF.setReadOnly(True)
        self.mF.setObjectName("mF")
        self.mD = QtWidgets.QLineEdit(self.centralwidget)
        self.mD.setGeometry(QtCore.QRect(1070, 120, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mD.setFont(font)
        self.mD.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mD.setAlignment(QtCore.Qt.AlignCenter)
        self.mD.setReadOnly(True)
        self.mD.setObjectName("mD")
        self.mE = QtWidgets.QLineEdit(self.centralwidget)
        self.mE.setGeometry(QtCore.QRect(1070, 80, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mE.setFont(font)
        self.mE.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mE.setAlignment(QtCore.Qt.AlignCenter)
        self.mE.setReadOnly(True)
        self.mE.setObjectName("mE")
        self.mA = QtWidgets.QLineEdit(self.centralwidget)
        self.mA.setGeometry(QtCore.QRect(1070, 240, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mA.setFont(font)
        self.mA.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mA.setAlignment(QtCore.Qt.AlignCenter)
        self.mA.setReadOnly(True)
        self.mA.setObjectName("mA")
        self.mC = QtWidgets.QLineEdit(self.centralwidget)
        self.mC.setGeometry(QtCore.QRect(1070, 160, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mC.setFont(font)
        self.mC.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mC.setAlignment(QtCore.Qt.AlignCenter)
        self.mC.setReadOnly(True)
        self.mC.setObjectName("mC")
        self.mB = QtWidgets.QLineEdit(self.centralwidget)
        self.mB.setGeometry(QtCore.QRect(1070, 200, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.mB.setFont(font)
        self.mB.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mB.setAlignment(QtCore.Qt.AlignCenter)
        self.mB.setReadOnly(True)
        self.mB.setObjectName("mB")
        self.m7 = QtWidgets.QLineEdit(self.centralwidget)
        self.m7.setGeometry(QtCore.QRect(1070, 360, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m7.setFont(font)
        self.m7.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m7.setAlignment(QtCore.Qt.AlignCenter)
        self.m7.setReadOnly(True)
        self.m7.setObjectName("m7")
        self.m4 = QtWidgets.QLineEdit(self.centralwidget)
        self.m4.setGeometry(QtCore.QRect(1070, 480, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m4.setFont(font)
        self.m4.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m4.setAlignment(QtCore.Qt.AlignCenter)
        self.m4.setReadOnly(True)
        self.m4.setObjectName("m4")
        self.m6 = QtWidgets.QLineEdit(self.centralwidget)
        self.m6.setGeometry(QtCore.QRect(1070, 400, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m6.setFont(font)
        self.m6.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m6.setAlignment(QtCore.Qt.AlignCenter)
        self.m6.setReadOnly(True)
        self.m6.setObjectName("m6")
        self.m9 = QtWidgets.QLineEdit(self.centralwidget)
        self.m9.setGeometry(QtCore.QRect(1070, 280, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m9.setFont(font)
        self.m9.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m9.setAlignment(QtCore.Qt.AlignCenter)
        self.m9.setReadOnly(True)
        self.m9.setObjectName("m9")
        self.m8 = QtWidgets.QLineEdit(self.centralwidget)
        self.m8.setGeometry(QtCore.QRect(1070, 320, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m8.setFont(font)
        self.m8.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m8.setAlignment(QtCore.Qt.AlignCenter)
        self.m8.setReadOnly(True)
        self.m8.setObjectName("m8")
        self.m5 = QtWidgets.QLineEdit(self.centralwidget)
        self.m5.setGeometry(QtCore.QRect(1070, 440, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m5.setFont(font)
        self.m5.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m5.setAlignment(QtCore.Qt.AlignCenter)
        self.m5.setReadOnly(True)
        self.m5.setObjectName("m5")
        self.m1 = QtWidgets.QLineEdit(self.centralwidget)
        self.m1.setGeometry(QtCore.QRect(1070, 600, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m1.setFont(font)
        self.m1.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m1.setAlignment(QtCore.Qt.AlignCenter)
        self.m1.setReadOnly(True)
        self.m1.setObjectName("m1")
        self.m3 = QtWidgets.QLineEdit(self.centralwidget)
        self.m3.setGeometry(QtCore.QRect(1070, 520, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m3.setFont(font)
        self.m3.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m3.setAlignment(QtCore.Qt.AlignCenter)
        self.m3.setReadOnly(True)
        self.m3.setObjectName("m3")
        self.m2 = QtWidgets.QLineEdit(self.centralwidget)
        self.m2.setGeometry(QtCore.QRect(1070, 560, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m2.setFont(font)
        self.m2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m2.setAlignment(QtCore.Qt.AlignCenter)
        self.m2.setReadOnly(True)
        self.m2.setObjectName("m2")
        self.m0 = QtWidgets.QLineEdit(self.centralwidget)
        self.m0.setGeometry(QtCore.QRect(1070, 640, 171, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.m0.setFont(font)
        self.m0.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.m0.setAlignment(QtCore.Qt.AlignCenter)
        self.m0.setReadOnly(True)
        self.m0.setObjectName("m0")
        self.graphicsView_17 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_17.setGeometry(QtCore.QRect(980, 40, 91, 41))
        self.graphicsView_17.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_17.setObjectName("graphicsView_17")
        self.graphicsView_18 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_18.setGeometry(QtCore.QRect(980, 80, 91, 41))
        self.graphicsView_18.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_18.setObjectName("graphicsView_18")
        self.graphicsView_19 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_19.setGeometry(QtCore.QRect(980, 160, 91, 41))
        self.graphicsView_19.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_19.setObjectName("graphicsView_19")
        self.graphicsView_20 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_20.setGeometry(QtCore.QRect(980, 120, 91, 41))
        self.graphicsView_20.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_20.setObjectName("graphicsView_20")
        self.graphicsView_21 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_21.setGeometry(QtCore.QRect(980, 240, 91, 41))
        self.graphicsView_21.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_21.setObjectName("graphicsView_21")
        self.graphicsView_22 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_22.setGeometry(QtCore.QRect(980, 200, 91, 41))
        self.graphicsView_22.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_22.setObjectName("graphicsView_22")
        self.graphicsView_23 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_23.setGeometry(QtCore.QRect(980, 320, 91, 41))
        self.graphicsView_23.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_23.setObjectName("graphicsView_23")
        self.graphicsView_24 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_24.setGeometry(QtCore.QRect(980, 280, 91, 41))
        self.graphicsView_24.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_24.setObjectName("graphicsView_24")
        self.graphicsView_25 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_25.setGeometry(QtCore.QRect(980, 400, 91, 41))
        self.graphicsView_25.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_25.setObjectName("graphicsView_25")
        self.graphicsView_26 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_26.setGeometry(QtCore.QRect(980, 360, 91, 41))
        self.graphicsView_26.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_26.setObjectName("graphicsView_26")
        self.graphicsView_27 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_27.setGeometry(QtCore.QRect(980, 480, 91, 41))
        self.graphicsView_27.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_27.setObjectName("graphicsView_27")
        self.graphicsView_28 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_28.setGeometry(QtCore.QRect(980, 520, 91, 41))
        self.graphicsView_28.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_28.setObjectName("graphicsView_28")
        self.graphicsView_29 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_29.setGeometry(QtCore.QRect(980, 600, 91, 41))
        self.graphicsView_29.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_29.setObjectName("graphicsView_29")
        self.graphicsView_30 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_30.setGeometry(QtCore.QRect(980, 440, 91, 41))
        self.graphicsView_30.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_30.setObjectName("graphicsView_30")
        self.graphicsView_31 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_31.setGeometry(QtCore.QRect(980, 560, 91, 41))
        self.graphicsView_31.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_31.setObjectName("graphicsView_31")
        self.graphicsView_32 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_32.setGeometry(QtCore.QRect(980, 640, 91, 41))
        self.graphicsView_32.setStyleSheet("background-color: rgb(180, 180, 180);")
        self.graphicsView_32.setObjectName("graphicsView_32")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(990, 40, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(990, 80, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(990, 120, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(990, 640, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(990, 600, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(990, 520, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(990, 560, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(990, 160, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.centralwidget)
        self.label_25.setGeometry(QtCore.QRect(990, 280, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(990, 240, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(990, 200, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(990, 480, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(990, 440, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(990, 400, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_30.setFont(font)
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(990, 360, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")
        self.label_32 = QtWidgets.QLabel(self.centralwidget)
        self.label_32.setGeometry(QtCore.QRect(990, 320, 61, 41))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.centralwidget)
        self.label_33.setGeometry(QtCore.QRect(580, 480, 261, 61))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setWordWrap(False)
        self.label_33.setObjectName("label_33")
        self.OPCODE = QtWidgets.QLineEdit(self.centralwidget)
        self.OPCODE.setGeometry(QtCore.QRect(600, 550, 221, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setPointSize(18)
        self.OPCODE.setFont(font)
        self.OPCODE.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.OPCODE.setStyleSheet("QLineEdit{\n"
"    background-color: rgb(200, 200, 200);\n"
"    border-style: outset;\n"
"    border-width: 1px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(100, 100, 100);\n"
"}")
        self.OPCODE.setFrame(True)
        self.OPCODE.setAlignment(QtCore.Qt.AlignCenter)
        self.OPCODE.setReadOnly(True)
        self.OPCODE.setObjectName("OPCODE")
        self.label_34 = QtWidgets.QLabel(self.centralwidget)
        self.label_34.setGeometry(QtCore.QRect(310, 20, 371, 81))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(35)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setFocusPolicy(QtCore.Qt.TabFocus)
        self.label_34.setStyleSheet("\n"
"color: rgb(75, 75, 75);")
        self.label_34.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_34.setAlignment(QtCore.Qt.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.centralwidget)
        self.label_35.setGeometry(QtCore.QRect(150, 480, 261, 61))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_35.setFont(font)
        self.label_35.setAlignment(QtCore.Qt.AlignCenter)
        self.label_35.setWordWrap(False)
        self.label_35.setObjectName("label_35")
        self.instruction = QtWidgets.QLineEdit(self.centralwidget)
        self.instruction.setGeometry(QtCore.QRect(150, 550, 261, 41))
        font = QtGui.QFont()
        font.setFamily("MS Reference Sans Serif")
        font.setPointSize(15)
        self.instruction.setFont(font)
        self.instruction.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.instruction.setStyleSheet("QLineEdit{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-style: outset;\n"
"    border-width: 1px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(100, 100, 100);\n"
"}\n"
"QLineEdit:focus{\n"
"    background-color: rgb(255, 255, 255);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(67, 135, 203);\n"
"}\n"
"")
        self.instruction.setAlignment(QtCore.Qt.AlignCenter)
        self.instruction.setObjectName("instruction")
        self.exe_button = QtWidgets.QPushButton(self.centralwidget)
        self.exe_button.setGeometry(QtCore.QRect(230, 620, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.exe_button.setFont(font)
        self.exe_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.exe_button.setStyleSheet("QPushButton{    \n"
"    background-color: rgb(214, 214, 214);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: rgb(63, 126, 189);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    \n"
"    background-color: rgb(219, 232, 255);\n"
"    border-style: outset;\n"
"    border-width: 1px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(32, 65, 98);\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: rgb(181, 220, 255);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(32, 65, 98);\n"
"}")
        self.exe_button.setAutoDefault(True)
        self.exe_button.setDefault(False)
        self.exe_button.setObjectName("exe_button")
        self.cyc_button = QtWidgets.QPushButton(self.centralwidget)
        self.cyc_button.setGeometry(QtCore.QRect(650, 620, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.cyc_button.setFont(font)
        self.cyc_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cyc_button.setStyleSheet("QPushButton{    \n"
"    background-color: rgb(214, 214, 214);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: rgb(63, 126, 189);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    \n"
"    background-color: rgb(219, 232, 255);\n"
"    border-style: outset;\n"
"    border-width: 1px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(32, 65, 98);\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    background-color: rgb(181, 220, 255);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(32, 65, 98);\n"
"}")
        self.cyc_button.setCheckable(False)
        self.cyc_button.setFlat(False)
        self.cyc_button.setObjectName("cyc_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 972, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.menubar.setFont(font)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "8086 Simulator"))
        ic=QtGui.QIcon("logo2.jpg")
        MainWindow.setWindowIcon(ic)
        self.label.setText(_translate("MainWindow", "AX"))
        self.label_3.setText(_translate("MainWindow", "AH"))
        self.label_4.setText(_translate("MainWindow", "AL"))
        self.AH.setText(_translate("MainWindow", "00"))
        self.AL.setText(_translate("MainWindow", "00"))
        self.label_2.setText(_translate("MainWindow", "BX"))
        self.label_5.setText(_translate("MainWindow", "CX"))
        self.label_6.setText(_translate("MainWindow", "DX"))
        self.label_7.setText(_translate("MainWindow", "SP"))
        self.label_8.setText(_translate("MainWindow", "BP"))
        self.label_9.setText(_translate("MainWindow", "SI"))
        self.label_10.setText(_translate("MainWindow", "DI"))
        self.label_11.setText(_translate("MainWindow", "BH"))
        self.label_12.setText(_translate("MainWindow", "BL"))
        self.label_13.setText(_translate("MainWindow", "CH"))
        self.label_14.setText(_translate("MainWindow", "CL"))
        self.label_15.setText(_translate("MainWindow", "DH"))
        self.label_16.setText(_translate("MainWindow", "DL"))
        self.BH.setText(_translate("MainWindow", "00"))
        self.BL.setText(_translate("MainWindow", "00"))
        self.CH.setText(_translate("MainWindow", "00"))
        self.CL.setText(_translate("MainWindow", "00"))
        self.DH.setText(_translate("MainWindow", "00"))
        self.DL.setText(_translate("MainWindow", "00"))
        self.SP.setText(_translate("MainWindow", "0000"))
        self.BP.setText(_translate("MainWindow", "0000"))
        self.SI.setText(_translate("MainWindow", "0000"))
        self.DI.setText(_translate("MainWindow", "0000"))
        self.mF.setText(_translate("MainWindow", "00h"))
        self.mD.setText(_translate("MainWindow", "00h"))
        self.mE.setText(_translate("MainWindow", "00h"))
        self.mA.setText(_translate("MainWindow", "00h"))
        self.mC.setText(_translate("MainWindow", "00h"))
        self.mB.setText(_translate("MainWindow", "00h"))
        self.m7.setText(_translate("MainWindow", "00h"))
        self.m4.setText(_translate("MainWindow", "00h"))
        self.m6.setText(_translate("MainWindow", "00h"))
        self.m9.setText(_translate("MainWindow", "00h"))
        self.m8.setText(_translate("MainWindow", "00h"))
        self.m5.setText(_translate("MainWindow", "00h"))
        self.m1.setText(_translate("MainWindow", "00h"))
        self.m3.setText(_translate("MainWindow", "00h"))
        self.m2.setText(_translate("MainWindow", "00h"))
        self.m0.setText(_translate("MainWindow", "00h"))
        self.label_17.setText(_translate("MainWindow", "0xFh"))
        self.label_18.setText(_translate("MainWindow", "0xEh"))
        self.label_19.setText(_translate("MainWindow", "0xDh"))
        self.label_20.setText(_translate("MainWindow", "0x0h"))
        self.label_21.setText(_translate("MainWindow", "0x1h"))
        self.label_22.setText(_translate("MainWindow", "0x3h"))
        self.label_23.setText(_translate("MainWindow", "0x2h"))
        self.label_24.setText(_translate("MainWindow", "0xCh"))
        self.label_25.setText(_translate("MainWindow", "0x9h"))
        self.label_26.setText(_translate("MainWindow", "0xAh"))
        self.label_27.setText(_translate("MainWindow", "0xBh"))
        self.label_28.setText(_translate("MainWindow", "0x4h"))
        self.label_29.setText(_translate("MainWindow", "0x5h"))
        self.label_30.setText(_translate("MainWindow", "0x6h"))
        self.label_31.setText(_translate("MainWindow", "0x7h"))
        self.label_32.setText(_translate("MainWindow", "0x8h"))
        self.label_33.setText(_translate("MainWindow", "Machine Code"))
        self.OPCODE.setText(_translate("MainWindow", ""))
        self.label_34.setText(_translate("MainWindow", "8086 Simulator"))
        self.label_35.setText(_translate("MainWindow", "Instruction"))
        self.instruction.setText(_translate("MainWindow", ""))
        self.exe_button.setText(_translate("MainWindow", "Execute"))
        self.cyc_button.setText(_translate("MainWindow", "Show cycles"))
        self.instruction.setPlaceholderText("Instruction here")
        self.exe_button.clicked.connect(exe_button_clicked)
        self.cyc_button.clicked.connect(cyc_button_clicked)
        
        
class Cycle_window(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(912, 597)
        font = QtGui.QFont()
        font.setPointSize(11)
        Form.setFont(font)
        self.BackButton = QtWidgets.QCommandLinkButton(Form)
        self.BackButton.setGeometry(QtCore.QRect(110, 50, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.BackButton.setFont(font)
        self.BackButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BackButton.setStyleSheet("QCommandLinkButton:!pressed\n"
"{\n"
"    background-color: rgb(214, 214, 214);\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: rgb(63, 126, 189);\n"
"}\n"
"QCommandLinkButton::hover{\n"
"    background-color: rgb(219, 232, 255);\n"
"    border-style: outset;\n"
"    border-width: 1px;\n"
"    border-radius: 9px;\n"
"    border-color: rgb(32, 65, 98);\n"
"}\n"
"")
        self.BackButton.setAutoDefault(False)
        self.BackButton.setDefault(False)
        self.BackButton.setObjectName("BackButton")
        self.mainPic = QtWidgets.QLabel(Form)
        self.mainPic.setGeometry(QtCore.QRect(70, 150, 771, 461))
        self.mainPic.setText("")
        self.mainPic.setPixmap(QtGui.QPixmap("../Documents/Cycles/main.png"))
        self.mainPic.setScaledContents(False)
        self.mainPic.setObjectName("mainPic")
        self.A1 = QtWidgets.QLabel(Form)
        self.A1.setGeometry(QtCore.QRect(180, 410, 151, 151))
        self.A1.setText("")
        self.A1.setPixmap(QtGui.QPixmap("../Documents/Cycles/1.png"))
        self.A1.setObjectName("A1")
        self.A2 = QtWidgets.QLabel(Form)
        self.A2.setGeometry(QtCore.QRect(360, 300, 41, 111))
        self.A2.setText("")
        self.A2.setPixmap(QtGui.QPixmap("../Documents/Cycles/02.png"))
        self.A2.setObjectName("A2")
        self.A3 = QtWidgets.QLabel(Form)
        self.A3.setGeometry(QtCore.QRect(530, 270, 81, 131))
        self.A3.setText("")
        self.A3.setPixmap(QtGui.QPixmap("../Documents/Cycles/03.png"))
        self.A3.setObjectName("A3")
        self.A4 = QtWidgets.QLabel(Form)
        self.A4.setGeometry(QtCore.QRect(610, 410, 47, 121))
        self.A4.setText("")
        self.A4.setPixmap(QtGui.QPixmap("../Documents/Cycles/4.png"))
        self.A4.setObjectName("A4")
        self.A5 = QtWidgets.QLabel(Form)
        self.A5.setGeometry(QtCore.QRect(720, 410, 47, 131))
        self.A5.setText("")
        self.A5.setPixmap(QtGui.QPixmap("../Documents/Cycles/5.png"))
        self.A5.setObjectName("A5")
        self.A6 = QtWidgets.QLabel(Form)
        self.A6.setGeometry(QtCore.QRect(760, 270, 71, 141))
        self.A6.setText("")
        self.A6.setPixmap(QtGui.QPixmap("../Documents/Cycles/6.png"))
        self.A6.setObjectName("A6")
        self.A7 = QtWidgets.QLabel(Form)
        self.A7.setGeometry(QtCore.QRect(750, 290, 81, 251))
        self.A7.setText("")
        self.A7.setPixmap(QtGui.QPixmap("../Documents/Cycles/7.png"))
        self.A7.setObjectName("A7")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(950, 140, 331, 41))
        font = QtGui.QFont()
        font.setFamily("Malgun Gothic")
        font.setPointSize(28)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.A8 = QtWidgets.QLabel(Form)
        self.A8.setGeometry(QtCore.QRect(730, 310, 101, 101))
        self.A8.setText("")
        self.A8.setPixmap(QtGui.QPixmap("../Documents/Cycles/8.png"))
        self.A8.setObjectName("A8")
        self.IC1 = QtWidgets.QLabel(Form)
        self.IC1.setGeometry(QtCore.QRect(970, 230, 281, 41))
        font = QtGui.QFont()
        font.setFamily("MS PGothic")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.IC1.setFont(font)
        self.IC1.setAlignment(QtCore.Qt.AlignCenter)
        self.IC1.setObjectName("IC1")
        self.IC2 = QtWidgets.QLabel(Form)
        self.IC2.setGeometry(QtCore.QRect(970, 290, 281, 41))
        font = QtGui.QFont()
        font.setFamily("MS PGothic")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.IC2.setFont(font)
        self.IC2.setAlignment(QtCore.Qt.AlignCenter)
        self.IC2.setObjectName("IC2")
        self.IC3 = QtWidgets.QLabel(Form)
        self.IC3.setGeometry(QtCore.QRect(970, 350, 281, 41))
        font = QtGui.QFont()
        font.setFamily("MS PGothic")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.IC3.setFont(font)
        self.IC3.setAlignment(QtCore.Qt.AlignCenter)
        self.IC3.setObjectName("IC3")
        self.IC4 = QtWidgets.QLabel(Form)
        self.IC4.setGeometry(QtCore.QRect(970, 410, 281, 41))
        font = QtGui.QFont()
        font.setFamily("MS PGothic")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.IC4.setFont(font)
        self.IC4.setAlignment(QtCore.Qt.AlignCenter)
        self.IC4.setObjectName("IC4")
        self.IC5 = QtWidgets.QLabel(Form)
        self.IC5.setGeometry(QtCore.QRect(970, 470, 281, 41))
        font = QtGui.QFont()
        font.setFamily("MS PGothic")
        font.setPointSize(22)
        font.setBold(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.IC5.setFont(font)
        self.IC5.setAlignment(QtCore.Qt.AlignCenter)
        self.IC5.setObjectName("IC5")
        self.A1.setHidden(True)
        self.A2.setHidden(True)
        self.A3.setHidden(True)
        self.A4.setHidden(True)
        self.A5.setHidden(True)
        self.A6.setHidden(True)
        self.A7.setHidden(True)
        self.A8.setHidden(True)
        self.BackButton.clicked.connect(back_button_clicked)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Instruction Cycles"))
        self.BackButton.setText(_translate("Form", "Go back to simulator"))
        self.label_2.setText(_translate("Form", "Instruction cycles:"))
        self.IC1.setText(_translate("Form", "FETCH"))
        self.IC2.setText(_translate("Form", "DECODE"))
        self.IC3.setText(_translate("Form", ""))
        self.IC4.setText(_translate("Form", ""))
        self.IC5.setText(_translate("Form", ""))
    
    
       


def exe_button_clicked():
    global ui
    global Example
    Example=ui.instruction.text()
    MachineCodeGenerator(Example)
    setValues()
    
    
    

    
    
    #MOV()
    #i=get_instruction(OpCode)
    #print(i)

    #print(MachineCode)
    #print(Invalid)





    
def cyc_button_clicked():
    global ui
    global MainWindow
    MainWindow=QtWidgets.QWidget()
    ui = Cycle_window()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ccycles()

def back_button_clicked():
    global ui
    global MainWindow
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    setValues()

def ccycles():
    ui.A1.setHidden(False)
    ui.A2.setHidden(False)
    if(OpCode=="000000"):
        if(not Immediate):
            if (MOD=="11"):
                ui.A8.setHidden(False)
            elif (D=="0"):
                ui.A5.setHidden(False)
            elif(D=="1"):
                ui.A4.setHidden(False)
    else:
        if(not Immediate):
            if (MOD=="11"):
                ui.A6.setHidden(False)
                ui.A3.setHidden(False)
            elif (D=="0"):
                ui.A5.setHidden(False)
                ui.A3.setHidden(False)
            elif(D=="1"):
                ui.A4.setHidden(False)
                ui.A7.setHidden(False)
                        
            

   
        
def setOPCODE(opcode):
    global ui
    if len(opcode) ==12 :
        ui.OPCODE.setGeometry(QtCore.QRect(600, 550, 221, 41))
    elif len(opcode) ==20:
        ui.OPCODE.setGeometry(QtCore.QRect(590, 550, 241, 41))
    elif len(opcode) ==28:
        ui.OPCODE.setGeometry(QtCore.QRect(540, 550, 351, 41))
    elif len(opcode) ==33:
        ui.OPCODE.setGeometry(QtCore.QRect(490, 550, 451, 41))
    if len(opcode)!=0:
        ui.OPCODE.setText(opcode)


def setAX(ax):
    global ui
    ui.AH.setText(ax[0:2])
    ui.AL.setText(ax[2:4])
def setBX(bx):
    global ui
    ui.BH.setText(bx[0:2])
    ui.BL.setText(bx[2:4])
def setCX(cx):
    global ui
    ui.CH.setText(cx[0:2])
    ui.CL.setText(cx[2:4])
def setDX(dx):
    global ui
    ui.DH.setText(dx[0:2])
    ui.DL.setText(dx[2:4])


def setValues():
    global ui
    setOPCODE(final_macheinecode)
    ui.instruction.setText(Example)
    i=get_instruction(OpCode)
    #print(i)
        
    if(i=="mov"):
            MOV()
    elif(i=="add"):
                #print("in add function")
                ADD()
    elif(i=="and"):
                AND()
    elif(i=="or"):
                OR()
    elif(i=="xor"):
                XOR()
    elif(i=="sub"):
                SUB()
    elif(i=="mul"):
                MUL()
    elif(i=="div"):
                DIV()
    elif(i=="inc"):
                INC()
    elif(i=="dec"):
                DEC()
        
    setAX(RegistersValue['ax'][0]+RegistersValue['ax'][1]+RegistersValue['ax'][2]+RegistersValue['ax'][3])
    setBX(RegistersValue['bx'][0]+RegistersValue['bx'][1]+RegistersValue['bx'][2]+RegistersValue['bx'][3])
    setCX(RegistersValue['cx'][0]+RegistersValue['cx'][1]+RegistersValue['cx'][2]+RegistersValue['cx'][3])
    setDX(RegistersValue['dx'][0]+RegistersValue['dx'][1]+RegistersValue['dx'][2]+RegistersValue['dx'][3])
    ui.SP.setText(RegistersValue['sp'][0]+RegistersValue['sp'][1]+RegistersValue['sp'][2]+RegistersValue['sp'][3])
    ui.BP.setText(RegistersValue['bp'][0]+RegistersValue['bp'][1]+RegistersValue['bp'][2]+RegistersValue['bp'][3])
    ui.SI.setText(RegistersValue['si'][0]+RegistersValue['si'][1]+RegistersValue['si'][2]+RegistersValue['si'][3])
    ui.DI.setText(RegistersValue['di'][0]+RegistersValue['di'][1]+RegistersValue['di'][2]+RegistersValue['di'][3])
    ui.m0.setText(MemoryValue["[0h]"])
    ui.m1.setText(MemoryValue["[1h]"])
    ui.m2.setText(MemoryValue["[2h]"])
    ui.m3.setText(MemoryValue["[3h]"])
    ui.m4.setText(MemoryValue["[4h]"])
    ui.m5.setText(MemoryValue["[5h]"])
    ui.m6.setText(MemoryValue["[6h]"])
    ui.m7.setText(MemoryValue["[7h]"])
    ui.m8.setText(MemoryValue["[8h]"])
    ui.m9.setText(MemoryValue["[9h]"])
    ui.mA.setText(MemoryValue["[ah]"])
    ui.mB.setText(MemoryValue["[bh]"])
    ui.mC.setText(MemoryValue["[ch]"])
    ui.mD.setText(MemoryValue["[dh]"])
    ui.mE.setText(MemoryValue["[eh]"])
    ui.mF.setText(MemoryValue["[fh]"])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

 
